-module(ex_banking_user_tests).

-include_lib("eunit/include/eunit.hrl").
-include("ex_banking_test.hrl").



-spec ?test_spec(test).

%% automatically generated by eunit



-spec ?test_spec(can_get_error_on_invalid_id_test).

can_get_error_on_invalid_id_test() ->
    ?assertException(error, function_clause, ex_banking_user:new("Mike")).



-spec ?test_spec(can_get_fields_test).

can_get_fields_test() ->
    ok, User = ex_banking_user:new(<<"Mike">>),
    ?assertMatch(<<"Mike">>, ex_banking_user:id(User)).



-spec ?test_spec(can_get_zero_balance_by_new_currency_test).

can_get_zero_balance_by_new_currency_test() ->
    User = ex_banking_user:new(<<"Mike">>),
    ?assertMatch(0, ex_banking_user:get_balance(User, <<"USD">>)).



-spec ?test_spec(can_get_error_getting_balance_by_invalid_currency_test).

can_get_error_getting_balance_by_invalid_currency_test() ->
    User = ex_banking_user:new(<<"Mike">>),
    ?assertException(error, function_clause, ex_banking_user:get_balance(User, "USD")).



-spec ?test_spec(can_run_deposit_operation_test).

can_run_deposit_operation_test() ->
    User = ex_banking_user:new(<<"Mike">>),
    {ok, {_Operation, User1}} = ex_banking_user:plan_deposit(User, <<"USD">>, 100),
    ?assertMatch(0, ex_banking_user:get_balance(User1, <<"USD">>)),
    ?assertMatch(1, ex_banking_user:get_operations_count(User1, <<"USD">>)).



-spec ?test_spec(can_commit_deposit_operation_test).

can_commit_deposit_operation_test() ->
    User = ex_banking_user:new(<<"Mike">>),
    {ok, {Operation, User1}} = ex_banking_user:plan_deposit(User, <<"USD">>, 100),
    {ok, User2} = ex_banking_user:commit(User1, <<"USD">>, Operation),
    ?assertMatch(100, ex_banking_user:get_balance(User2, <<"USD">>)),
    ?assertMatch(0, ex_banking_user:get_operations_count(User2, <<"USD">>)).



-spec ?test_spec(can_run_withdraw_operation_test).

can_run_withdraw_operation_test() ->
    User = ex_banking_user:new(<<"Mike">>),
    {ok, {Operation1, User1}} = ex_banking_user:plan_deposit(User, <<"USD">>, 100),
    {ok, User2} = ex_banking_user:commit(User1, <<"USD">>, Operation1),
    ?assertMatch(100, ex_banking_user:get_balance(User2, <<"USD">>)),
    {ok, {_Operation2, User3}} = ex_banking_user:plan_withdraw(User2, <<"USD">>, 50),
    ?assertMatch(50, ex_banking_user:get_balance(User3, <<"USD">>)),
    ?assertMatch(1, ex_banking_user:get_operations_count(User3, <<"USD">>)).



-spec ?test_spec(can_commit_withdraw_operation_test).

can_commit_withdraw_operation_test() ->
    User = ex_banking_user:new(<<"Mike">>),
    {ok, {Operation1, User1}} = ex_banking_user:plan_deposit(User, <<"USD">>, 100),
    {ok, User2} = ex_banking_user:commit(User1, <<"USD">>, Operation1),
    ?assertMatch(100, ex_banking_user:get_balance(User2, <<"USD">>)),
    {ok, {Operation2, User3}} = ex_banking_user:plan_withdraw(User2, <<"USD">>, 50),
    {ok, User4} = ex_banking_user:commit(User3, <<"USD">>, Operation2),
    ?assertMatch(50, ex_banking_user:get_balance(User4, <<"USD">>)),
    ?assertMatch(0, ex_banking_user:get_operations_count(User4, <<"USD">>)).
